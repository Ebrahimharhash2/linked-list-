#include <iostream>
#include <vector>
#include <algorithm>
#include<cmath>
#include<map>
using namespace std;
class node {
public:
	int value;
	node* next;
	node(int value) {
		this->value = value;
		next = nullptr;

	}
};

class linkedlist {
private:
	node* head;
	node* tail;
	int length;
public:
	linkedlist(int value) {
		node* newnode = new node(value);
		head = newnode;
		tail = newnode;
		length = 1;
	}
	~linkedlist() {
		node* temp = head;
		while (head != nullptr) {
			head = head->next;
			delete temp;
			temp = head;

		}

	}
	void printlist() {
		node* temp = head;
		while (temp != nullptr) {
			cout << temp->value << endl;
			temp = temp->next;
		}
	}

	void append(int value) {
		node* newnode = new node(value);
		if (length == 0) {
			head = newnode;
			tail = newnode;

		}
		else {
			tail->next = newnode;
			tail = newnode;
		}
		length++;
	}

	void gethead() {
		cout << "head :" << head->value << endl;
	}
	void gettail() {
		cout << "tail :" << tail->value << endl;

	}
	void getlength() {
		cout << " length :" << length;
	}
	void deletelast() {
		if (length == 0) {
			return;
		}
		node* temp = head;
		node* pre = head;
		while (temp->next != nullptr) {
			pre = temp;
			temp = temp->next;
		}
		tail = pre;
		tail->next = nullptr;
		length--;
		if (length == 0) {
			tail = nullptr;
			head = nullptr;
		}
		delete temp;
	}
	void prepend(int value) {
		node* newnode = new node(value);
		if (length == 0) {
			head = newnode;
			tail = newnode;

		}
		else {
			newnode->next = head;
			head = newnode;
		}
		length++;
	}

	void deletefirst() {
		if (length == 0) return;
		node* temp = head;
		if (length == 1) {
			head = nullptr;
			tail = nullptr;
		}
		else {
			head = head->next;
		}
		delete temp;
		length--;

	}
	node* get(int index) {
		if (index < 0 || index >= length) {
			return nullptr;
		}
		node* temp = head;
		for (int i = 0; i < index; i++) {
			temp = temp->next;
		}
		return temp;
	}
	bool set(int index, int value) {
		node* temp = get(index);
		if (temp != nullptr) {
			temp->value = value;
			return true;
		}
		return false;
	}
	bool insert(int index, int value) {
		if (index<0 || index>length) return false;
		if (length == 0) {
			prepend(value);
			return true;
		}
		if (index == length) {
			append(value);
			return true;

		}
		node* newnode = new node(value);
		node* temp = get(index - 1);
		newnode->next = temp->next;
		temp->next = newnode;
		length++;
		return true;

	}
	void deletenode(int index){
		if (index<0 || index>=length)return ;
		if (length == 0) {
			return deletefirst();
	}
		if (index == length - 1) {
			return deletelast();
		}
		node* prev = get(index - 1);
		node* temp = prev->next;
		prev->next = temp->next;
		delete temp;
		length--;
	}
	void reverse() {
		node* temp = head;
		head = tail;
		tail = temp;
		node* after = temp->next;
		node* before = nullptr;
		for (int i = 0; i < length; i++) {
			after = temp->next;
			temp->next = before;
			before = temp;
			temp = after;
		}


	}
	node* findMiddleNode() {
		node* slow = head;
		node* fast = head;
		while (fast != nullptr && fast->next != nullptr) {
			slow = slow->next;
			fast = fast->next->next;
		}
		return slow;
	}

	bool hasLoop() {
		node* slow = head;
		node* fast = head;
		while (fast != nullptr && fast->next != nullptr) {
			slow = slow->next;
			fast = fast->next->next;
			if (slow == fast) {
				return true;
			}
		}
		return false;
	}
	// a partiton list problem
	void partitionList(int x) {
		if (head == nullptr) return;

		node dummy1(0);
		node dummy2(0);
		node* prev1 = &dummy1;
		node* prev2 = &dummy2;
		node* current = head;

		while (current != nullptr) {
			if (current->value < x) {
				prev1->next = current;
				prev1 = current;
			}
			else {
				prev2->next = current;
				prev2 = current;
			}
			current = current->next;
		}

		prev2->next = nullptr;
		prev1->next = dummy2.next;
		head = dummy1.next;
	}


};



int main() {
	linkedlist mylinkedlist(2);
	mylinkedlist.append(3);
	mylinkedlist.prepend(1);
	mylinkedlist.append(4);
	mylinkedlist.insert(2, 7);
	mylinkedlist.printlist();
	mylinkedlist.deletenode(3);
	mylinkedlist.printlist();
}
